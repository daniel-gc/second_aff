package mx.pliis.afiliacion.service.pago.pasarela;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import mx.openpay.client.Charge;
import mx.openpay.client.exceptions.OpenpayServiceException;
import mx.openpay.client.exceptions.ServiceUnavailableException;
import mx.pliis.afiliacion.dto.pago.ChargeDTO;
import mx.pliis.afiliacion.dto.pago.webhook.WebhookNotification;
import mx.pliis.afiliacion.service.excepciones.InvalidDataException;
import mx.pliis.afiliacion.service.excepciones.PaymentServiceException;

public interface ChargesService {

	/**
	 * Create a customer pay on OpenPay platform
	 * 
	 * <code>
	 * {
	 *	   "source_id" : "kqgykn96i7bcs1wwhvgw",
	 *	   "method" : "card",
	 *	   "amount" : 100,
	 *	   "description" : "Cargo inicial a mi cuenta",
	 *	   "order_id" : "oid-00051",
	 *	   "device_session_id":"kR1MiQhz2otdIuUlQkbEyitIqVMiI16f"
	 *	}
	 * </code>
	 * 
	 * @param opCustomerId
	 * @param opCardId
	 * @param amount          Amount to charge. Must be an amount greater than zero,
	 *                        with up to two decimal digits.
	 * @param description     A description associated to the charge
	 * @param orderId         Unique identifier of charge. Must be unique among all
	 *                        transactions.
	 * @param deviceSessionId Identifier of the device generated by the antifraud
	 *                        tool.
	 * @return
	 * @throws PaymentServiceException
	 */
	public Charge createCustomerCharge(String opCustomerId, String opCardId, BigDecimal amount, String description,
			String orderId, String deviceSessionId) throws InvalidDataException, OpenpayServiceException, ServiceUnavailableException; //throws PaymentServiceException;
	
	/**
	 * Create the customer if not exist in OpenPay, after use this customer to send the charge
	 * @param chargeDTO
	 * @return
	 * @throws PaymentServiceException
	 */
	public Charge createCompleteCustomerCharge(final ChargeDTO chargeDTO) throws PaymentServiceException;

	/**
	 * Create a customer refund on OpenPay platform
	 * 
	 * @param opCustomerId,
	 * @param description Optional.
	 * @param amount      Optional. If you assign a value, it must be less. If a
	 *                    default value is not assigned it is equal to the
	 *                    transaction amount to be refunded
	 * @return
	 * @throws PaymentServiceException
	 */
	public Charge createCustomerRefund(String opCustomerId, String description, BigDecimal amount) throws PaymentServiceException;

	/**
	 * Search the charges associated to the customer
	 * Returns an array of transaction objects charges in descending order by creation date.
	 * 
	 * @param opCustomerId
	 * @param creation     Same as creation date. Format yyyy-mm-dd
	 * @param creationGte  After the creation date. Format yyyy-mm-dd
	 * @param creationLte  Before the creation date. Format yyyy-mm-dd
	 * @param offset       Number of records to skip at the beginning, default 0.
	 * @param limit        Number of required records, default 10.
	 * @return
	 * @throws PaymentServiceException
	 */
	public List<Charge> searchCustomerCharges(String opCustomerId, Date creation, Date creationGte, Date creationLte,
			Integer offset, Integer limit) throws PaymentServiceException;
	
	/**
	 * Confirm a payment in PENDING from OpenPay WebHook
	 * 
	 * @param notification
	 * @throws InvalidDataException
	 */
	public void confirmTransactionStatus(final WebhookNotification notification) throws InvalidDataException;
}
